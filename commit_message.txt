[Setup]: Complete project setup and initial structure

This commit completes the project setup tasks from the checklist roadmap:

- Set up version control with .gitignore for Godot
- Configure web export settings in export_presets.cfg
- Establish folder structure following the project organization
- Create initial scene hierarchy with main, game, options, and credits scenes
- Set up automated testing framework with test runner and example test

The commit includes:
- Basic project configuration in project.godot
- Main scene with menu navigation
- Placeholder game, options, and credits scenes
- Testing framework with documentation
- Directory structure with README files

All code follows NASA coding guidelines with proper documentation and error handling.

Testing notes:
- Manual testing of scene navigation between main menu, game, options, and credits
- Automated test framework verified with example test
- Settings persistence tested in options menu

Next steps:
- Implement player character controller
- Create enemy AI system
- Design level structure

[Feature]: Implement Player Character System

Completed the player character system with the following components:

- Created player character scene with collision, mesh, camera, and animation nodes
- Implemented animation library with animations for idle, walk, run, dodge, attacks, block, and death
- Added weapon data resource system with scaling, requirements, and damage calculation
- Created armor data resource system with defense types and resistances
- Implemented player stats system with attributes, leveling, and derived stats
- Added inventory system for managing weapons, armor, consumables, and key items
- Created consumable item system with various effect types
- Added key item system for quest and progression items
- Created sample resources for weapons, armor, consumables, and key items

This completes the Player Character section of the roadmap, providing a solid foundation for the combat and progression systems. The implementation follows NASA coding guidelines with proper documentation and modular design.

Next steps:
- Implement enemy AI system
- Create level design framework
- Develop checkpoint system 